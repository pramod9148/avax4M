// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract GlobeToken is ERC20, Ownable, ERC20Burnable {
    event LogMessage(string message);

    enum GlobeType { Earth, Mars, Jupiter }

    mapping(GlobeType => uint256) public globeRates;
    GlobeType public recentlyRedeemedGlobe;

    constructor(address initialOwner) Ownable(initialOwner) ERC20("Globe Token", "GLOBE") {
        setPrices();
    }
    function setPrices() internal {
        globeRates[GlobeType.Earth] = 500;
        globeRates[GlobeType.Mars] = 1500;
        globeRates[GlobeType.Jupiter] = 2500;
    }

    function mintTokens(address beneficiary, uint256 amount) external onlyOwner {
        _mint(beneficiary, amount);
    }

    function burnTokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT TOKENS!!");
        _burn(msg.sender, amount);
        emit LogMessage("Tokens burned successfully");
    }

    function transferTokens(address recipient, uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT TOKENS!!");
        _transfer(msg.sender, recipient, amount);
    }


    function redeemForGlobe(uint256 tokenAmount) external {
        if (globeRates[GlobeType.Jupiter] <= tokenAmount) {
            recentlyRedeemedGlobe = GlobeType.Jupiter;
        } else if (globeRates[GlobeType.Mars] <= tokenAmount) {
            recentlyRedeemedGlobe = GlobeType.Mars;
        } else if (globeRates[GlobeType.Earth] <= tokenAmount) {
            recentlyRedeemedGlobe = GlobeType.Earth;
        } else {
            revert("No globe item can be redeemed with the specified token amount");
        }

        require(globeRates[recentlyRedeemedGlobe] > 0, "Invalid globe type");
        require(balanceOf(msg.sender) >= globeRates[recentlyRedeemedGlobe], "INSUFFICIENT TOKENS!!");
        _burn(msg.sender, globeRates[recentlyRedeemedGlobe]);
        emit LogMessage("Globe item redeemed successfully");
    }
}
